// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("PLANETSCALE_DATABASE_URL")

  referentialIntegrity = "prisma"
}

model ClientActor {
  id          String               @id
  fingerprint String
  sessions    ClientActorSession[]
  user        User?                @relation(fields: [userId], references: [id])
  userId      String?              @unique
}

model ClientActorSession {
  id             String           @id
  actor          ClientActor      @relation(fields: [actorId], references: [id])
  actorId        String
  AnalyticsEvent AnalyticsEvent[]

  @@index([actorId])
}

model User {
  id               String         @id
  address          String         @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
  email            String         @unique
  username         String         @unique
  display_name     String?
  role             Role           @default(ANON_ROLE)
  profile          Profile?
  preference       Preference?
  temporaryProfile TemporaryUser?
  ClientActor      ClientActor?

  @@index([email, address, username])
}

model TemporaryUser {
  address String @id
  user    User   @relation(fields: [userId], references: [id])
  userId  String @unique

  @@index([address])
}

model Preference {
  id     String @id
  theme  Theme  @default(LIGHT)
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Profile {
  id                   String   @id
  bio                  String?  @db.VarChar(300)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())
  banner_pic           String?
  banner_pic_blurhash  String?
  profile_pic          String?
  profile_pic_blurhash String?
  posts                Post[]
  totm                 TOTM?

  user    User      @relation(fields: [userId], references: [id])
  userId  String    @unique
  Like    Like[]
  Comment Comment[]

  @@index([id, userId])
}

model Post {
  id        String    @id
  text      String
  comments  Comment[]
  media     Media[]
  tags      String
  postType  PostType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  profile   Profile   @relation(fields: [profileId], references: [id])
  profileId String
  Like      Like[]

  @@index([text, id])
}

model Media {
  id       String    @id
  type     MediaType
  url      String
  blurhash String?
  post     Post      @relation(fields: [postId], references: [id])
  postId   String
}

model Comment {
  id        String   @id
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  actor     Profile  @relation(fields: [actorId], references: [id])
  actorId   String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String
}

model Like {
  id        String   @id
  actorId   String
  actor     Profile  @relation(fields: [actorId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String
  updatedAt DateTime @default(now())
}

model Tag {
  name String @id

  @@index([name])
}

model SubscriptionPackage {
  id String @id
}

model SubscriptionOffer {
  id String @id
}

model Livestream {
  id String @id
}

model Referral {
  id String @id
}

model Chat {
  id String @id
}

model Message {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Reaction {
  id String @id
}

model Tip {
  id String @id
}

model Notification {
  id String @id
}

model TOTM {
  id        String  @id
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique
}

model NFT {
  id String @id
}

model Ban {
  id String @id
}

model Block {
  id String @id
}

model ChainEvent {
  tx   String @id
  data String
}

model LogEvent {
  id         String @id
  created_at BigInt
  content    String
}

model AnalyticsEvent {
  id                 String             @id
  created_at         BigInt
  content            String
  clientActorSession ClientActorSession @relation(fields: [sessionId], references: [id])
  sessionId          String
}

model Magazine {
  id         String @id
  title      String
  href       String
  cover      String
  month_year Int
}

model NewsletterSubscribers {
  id        String   @id
  email     String   @unique
  createdAt DateTime @default(now())
}

enum Role {
  ANON_ROLE
  GENERAL_ROLE
  CREATOR_ROLE
  ADMIN_ROLE
  SUPERUSER_ROLE
}

enum Theme {
  LIGHT
  DARK
  PINK
}

enum MediaType {
  IMAGE
  VIDEO
}

enum PostType {
  COLLECTIBLE
  CONTENT
  SUBSCRIPTION_ITEM
}
